# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR The FreeBSD Project
# This file is distributed under the same license as the FreeBSD Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: FreeBSD Documentation VERSION\n"
"POT-Creation-Date: 2025-05-01 19:56-0300\n"
"PO-Revision-Date: 2021-06-03 00:08+0000\n"
"Last-Translator: Anonymous <noreply@weblate.org>\n"
"Language-Team: Chinese (Simplified) <https://translate-dev.freebsd.org/"
"projects/documentation/booksarch-handbooksound_index/zh_CN/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.6.2\n"

#. type: YAML Front Matter: description
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:1
#, fuzzy, no-wrap
#| msgid "Sound Subsystem"
msgid "FreeBSD Sound Subsystem"
msgstr "声音子系统"

#. type: YAML Front Matter: title
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:1
#, no-wrap
msgid "Chapter 15. Sound Subsystem"
msgstr ""

#. type: Title =
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:14
#, no-wrap
msgid "Sound Subsystem"
msgstr "声音子系统"

#. type: Title ==
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:52
#, no-wrap
msgid "Introduction"
msgstr "介绍"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:55
msgid ""
"The FreeBSD sound subsystem cleanly separates generic sound handling issues "
"from device-specific ones. This makes it easier to add support for new "
"hardware."
msgstr ""
"FreeBSD声音子系统清晰地将通用声音处理问题与设备特定的问题分离 开来。这使得更"
"容易加入对新设备的支持。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:57
msgid ""
"The man:pcm[4] framework is the central piece of the sound subsystem. It "
"mainly implements the following elements:"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:59
#, fuzzy
msgid ""
"A system call interface (read, write, ioctls) to digitized sound and mixer "
"functions. The ioctl command set is compatible with the legacy _OSS_ or "
"_Voxware_ interface, allowing common multimedia applications to be ported "
"without modification."
msgstr ""
"一个到数字化声音和混音器函数的系统调用接口（read, write, ioctls）。ioctl命令"
"集合兼容老的<emphasis>OSS</emphasis> 或<emphasis>Voxware</emphasis>接口，允许"
"一般多媒体应用程序 不加修改地移植。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:60
msgid ""
"Common code for processing sound data (format conversions, virtual channels)."
msgstr "处理声音数据的公共代码（格式转换，虚拟通道）。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:61
msgid ""
"A uniform software interface to hardware-specific audio interface modules."
msgstr "一个统一的软件接口，与硬件特定的音频接口模块接口"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:62
msgid ""
"Additional support for some common hardware interfaces (ac97), or shared "
"hardware-specific code (ex: ISA DMA routines)."
msgstr ""
"对某些通用硬件接口（ac97）或共享的硬件特定代码 （例如：ISA DMA例程）的额外支"
"持。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:64
#, fuzzy
msgid ""
"The support for specific sound cards is implemented by hardware-specific "
"drivers, which provide channel and mixer interfaces to plug into the generic "
"[.filename]#pcm# code."
msgstr ""
"对特定声卡的支持是通过硬件特定的驱动程序来实现的，这些驱动程序 提供通道和混音"
"器接口，插入到通用<filename>pcm</filename>代码中。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:66
#, fuzzy
msgid ""
"In this chapter, the term [.filename]#pcm# will refer to the central, common "
"part of the sound driver, as opposed to the hardware-specific modules."
msgstr ""
"本章中，术语<filename>pcm</filename>将指声音驱动程序的 中心，通用部分，这是对"
"比硬件特定的模块而言的。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:68
msgid ""
"The prospective driver writer will of course want to start from an existing "
"module and use the code as the ultimate reference. But, while the sound code "
"is nice and clean, it is also mostly devoid of comments. This document tries "
"to give an overview of the framework interface and answer some questions "
"that may arise while adapting the existing code."
msgstr ""
"预期的驱动程序编写者当然希望从现有模块开始，并使用那些代码作为 最终参考。但"
"是，由于声音代码十分简洁漂亮，这也基本上免除了注释。 本文档试图给出框架接口的"
"一个概览，并回答改写现有代码时可能出现的 一些问题。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:70
msgid ""
"As an alternative, or in addition to starting from a working example, you "
"can find a commented driver template at https://people.FreeBSD.org/~cg/"
"template.c[ https://people.FreeBSD.org/~cg/template.c]"
msgstr ""

#. type: Title ==
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:72
#, no-wrap
msgid "Files"
msgstr "文件"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:75
#, fuzzy
msgid ""
"All the relevant code lives in [.filename]#/usr/src/sys/dev/sound/#, except "
"for the public ioctl interface definitions, found in [.filename]#/usr/src/"
"sys/sys/soundcard.h#"
msgstr ""
"除<filename>/usr/src/sys/sys/soundcard.h</filename>中的公共 ioctl接口定义外，"
"所有的相关代码当前(FreeBSD 4.4)位于 <filename>/usr/src/sys/dev/sound/</"
"filename>。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:77
msgid ""
"Under [.filename]#/usr/src/sys/dev/sound/#, the [.filename]#pcm/# directory "
"holds the central code, while the [.filename]#pci/#, [.filename]#isa/# and [."
"filename]#usb/# directories have the drivers for PCI and ISA boards, and for "
"USB audio devices."
msgstr ""

#. type: Title ==
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:79
#, no-wrap
msgid "Probing, Attaching, etc."
msgstr "探测，连接等"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:82
msgid ""
"Sound drivers probe and attach in almost the same way as any hardware driver "
"module. You might want to look at the crossref:isa-driver[isa-driver,ISA] or "
"crossref:pci[pci,PCI] specific sections of the handbook for more information."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:84
msgid "However, sound drivers differ in some ways:"
msgstr "然而，声音驱动程序在某些方面又有些不同："

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:86
msgid ""
"They declare themselves as [.filename]#pcm# class devices, with a `struct "
"snddev_info` device private structure:"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:94
#, no-wrap
msgid ""
"          static driver_t xxx_driver = {\n"
"              \"pcm\",\n"
"              xxx_methods,\n"
"              sizeof(struct snddev_info)\n"
"          };\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:97
#, no-wrap
msgid ""
"          DRIVER_MODULE(snd_xxxpci, pci, xxx_driver, pcm_devclass, 0, 0);\n"
"          MODULE_DEPEND(snd_xxxpci, snd_pcm, PCM_MINVER, PCM_PREFVER,PCM_MAXVER);\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:100
msgid ""
"Most sound drivers need to store additional private information about their "
"device. A private data structure is usually allocated in the attach routine. "
"Its address is passed to [.filename]#pcm# by the calls to `pcm_register()` "
"and `mixer_init()`. [.filename]#pcm# later passes back this address as a "
"parameter in calls to the sound driver interfaces."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:103
msgid ""
"The sound driver attach routine should declare its MIXER or AC97 interface "
"to [.filename]#pcm# by calling `mixer_init()`. For a MIXER interface, this "
"causes in turn a call to crossref:sound[xxxmixer-init,`xxxmixer_init()`]."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:104
msgid ""
"The sound driver attach routine declares its general CHANNEL configuration "
"to [.filename]#pcm# by calling `pcm_register(dev, sc, nplay, nrec)`, where "
"`sc` is the address for the device data structure, used in further calls "
"from [.filename]#pcm#, and `nplay` and `nrec` are the number of play and "
"record channels."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:107
msgid ""
"The sound driver attach routine declares each of its channel objects by "
"calls to `pcm_addchan()`. This sets up the channel glue in [.filename]#pcm# "
"and causes in turn a call to crossref:sound[xxxchannel-init,"
"`xxxchannel_init()`]."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:108
msgid ""
"The sound driver detach routine should call `pcm_unregister()` before "
"releasing its resources."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:110
msgid "There are two possible methods to handle non-PnP devices:"
msgstr "有两种可能的方法来处理非PnP设备："

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:112
#, fuzzy
msgid ""
"Use a `device_identify()` method (example: [.filename]#sound/isa/es1888.c#). "
"The `device_identify()` method probes for the hardware at known addresses "
"and, if it finds a supported device, creates a new pcm device which is then "
"passed to probe/attach."
msgstr ""
"使用<function>device_identify()</function>方法 （范例：<filename>sound/isa/"
"es1888.c</filename>）。 <function>device_identify()</function>方法在已知地址"
"探测硬件， 如果发现支持的设备就会创建一个新的pcm设备，这个pcm设备接着 会被传"
"递到probe/attach。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:113
#, fuzzy
msgid ""
"Use a custom kernel configuration with appropriate hints for pcm devices "
"(example: [.filename]#sound/isa/mss.c#)."
msgstr ""
"使用定制内核配置的方法，为pcm设备设置适当的hints（范例： <filename>sound/isa/"
"mss.c</filename>）。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:115
msgid ""
"[.filename]#pcm# drivers should implement `device_suspend`, `device_resume` "
"and `device_shutdown` routines, so that power management and module "
"unloading function correctly."
msgstr ""

#. type: Title ==
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:117
#, no-wrap
msgid "Interfaces"
msgstr "网络接口"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:121
msgid ""
"The interface between the [.filename]#pcm# core and the sound drivers is "
"defined in terms of crossref:kobj[kernel-objects,kernel objects]."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:123
msgid ""
"There are two main interfaces that a sound driver will usually provide: "
"_CHANNEL_ and either _MIXER_ or _AC97_."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:125
msgid ""
"The _AC97_ interface is a very small hardware access (register read/write) "
"interface, implemented by drivers for hardware with an AC97 codec. In this "
"case, the actual MIXER interface is provided by the shared AC97 code in [."
"filename]#pcm#."
msgstr ""

#. type: Title ===
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:126
#, no-wrap
msgid "The CHANNEL Interface"
msgstr "CHANNEL接口"

#. type: Title ====
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:128
#, no-wrap
msgid "Common Notes for Function Parameters"
msgstr "函数参数的通常注意事项"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:131
msgid ""
"Sound drivers usually have a private data structure to describe their "
"device, and one structure for each play and record data channel that it "
"supports."
msgstr ""
"声音驱动程序通常用一个私有数据结构来描述他们的设备，驱动 程序所支持的播放和录"
"音数据通道各有一个。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:133
msgid ""
"For all CHANNEL interface functions, the first parameter is an opaque "
"pointer."
msgstr "对于所有的CHANNEL接口函数，第一个参数是一个不透明的指针。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:135
msgid ""
"The second parameter is a pointer to the private channel data structure, "
"except for `channel_init()` which has a pointer to the private device "
"structure (and returns the channel pointer for further use by [."
"filename]#pcm#)."
msgstr ""

#. type: Title ====
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:136
#, no-wrap
msgid "Overview of Data Transfer Operations"
msgstr "数据传输操作概览"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:139
msgid ""
"For sound data transfers, the [.filename]#pcm# core and the sound drivers "
"communicate through a shared memory area, described by a `struct snd_dbuf`."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:141
msgid ""
"`struct snd_dbuf` is private to [.filename]#pcm#, and sound drivers obtain "
"values of interest by calls to accessor functions (`sndbuf_getxxx()`)."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:143
msgid ""
"The shared memory area has a size of `sndbuf_getsize()` and is divided into "
"fixed size blocks of `sndbuf_getblksz()` bytes."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:145
msgid ""
"When playing, the general transfer mechanism is as follows (reverse the idea "
"for recording):"
msgstr "当播放时，常规的传输机制如下（将意思反过来就是录音）："

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:148
msgid ""
"[.filename]#pcm# initially fills up the buffer, then calls the sound "
"driver's crossref:sound[channel-trigger,`xxxchannel_trigger()`] function "
"with a parameter of PCMTRIG_START."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:149
msgid ""
"The sound driver then arranges to repeatedly transfer the whole memory area "
"(`sndbuf_getbuf()`, `sndbuf_getsize()`) to the device, in blocks of "
"`sndbuf_getblksz()` bytes. It calls back the `chn_intr()`[.filename]#pcm# "
"function for each transferred block (this will typically happen at interrupt "
"time)."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:150
msgid ""
"`chn_intr()` arranges to copy new data to the area that was transferred to "
"the device (now free), and make appropriate updates to the `snd_dbuf` "
"structure."
msgstr ""

#. type: Title ====
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:152
#, no-wrap
msgid "channel_init"
msgstr "channel_init"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:156
msgid ""
"`xxxchannel_init()` is called to initialize each of the play or record "
"channels.  The calls are initiated from the sound driver attach routine. "
"(See the crossref:sound[pcm-probe-and-attach,probe and attach section)."
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:168
#, no-wrap
msgid ""
"          static void *\n"
"          xxxchannel_init(kobj_t obj, void *data,\n"
"             struct snd_dbuf *b, struct pcm_channel *c, int dir) <.>\n"
"          {\n"
"              struct xxx_info *sc = data;\n"
"              struct xxx_chinfo *ch;\n"
"               ...\n"
"              return ch; <.>\n"
"           }\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:171
msgid ""
"`b` is the address for the channel `struct snd_dbuf`. It should be "
"initialized in the function by calling `sndbuf_alloc()`. The buffer size to "
"use is normally a small multiple of the 'typical' unit transfer size for "
"your device.`c` is the [.filename]#pcm# channel control structure pointer. "
"This is an opaque object. The function should store it in the local channel "
"structure, to be used in later calls to [.filename]#pcm# (ie: `chn_intr(c)`)."
"`dir` indicates the channel direction (`PCMDIR_PLAY` or `PCMDIR_REC`)."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:173
#, fuzzy
msgid ""
"The function should return a pointer to the private area used to control "
"this channel. This will be passed as a parameter to other channel interface "
"calls."
msgstr ""
"函数应当返回一个指针，此指针指向用于控制此通道的私有 区域。它将作为参数被传递"
"到对其他通道接口的调用。"

#. type: Title ====
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:174
#, no-wrap
msgid "channel_setformat"
msgstr "channel_setformat"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:177
msgid ""
"`xxxchannel_setformat()` should set up the hardware for the specified "
"channel for the specified sound format."
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:187
#, no-wrap
msgid ""
"          static int\n"
"          xxxchannel_setformat(kobj_t obj, void *data, u_int32_t format) <.>\n"
"          {\n"
"              struct xxx_chinfo *ch = data;\n"
"               ...\n"
"              return 0;\n"
"           }\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:190
msgid ""
"`format` is specified as an `AFMT_XXX value` ([.filename]#soundcard.h#)."
msgstr ""

#. type: Title ====
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:191
#, no-wrap
msgid "channel_setspeed"
msgstr "channel_setspeed"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:194
msgid ""
"`xxxchannel_setspeed()` sets up the channel hardware for the specified "
"sampling speed, and returns the possibly adjusted speed."
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:204
#, fuzzy, no-wrap
msgid ""
"          static int\n"
"          xxxchannel_setspeed(kobj_t obj, void *data, u_int32_t speed)\n"
"          {\n"
"              struct xxx_chinfo *ch = data;\n"
"               ...\n"
"              return speed;\n"
"           }\n"
msgstr ""
"          static int\n"
"          xxxchannel_setspeed(kobj_t obj, void *data, u_int32_t speed)\n"
"          {\n"
"              struct xxx_chinfo *ch = data;\n"
"               ...\n"
"              return speed;\n"
"           }\n"

#. type: Title ====
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:206
#, no-wrap
msgid "channel_setblocksize"
msgstr "channel_setblocksize"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:209
#, fuzzy
msgid ""
"`xxxchannel_setblocksize()` sets the block size, which is the size of unit "
"transactions between [.filename]#pcm# and the sound driver, and between the "
"sound driver and the device. Typically, this would be the number of bytes "
"transferred before an interrupt occurs. During a transfer, the sound driver "
"should call [.filename]#pcm#'s `chn_intr()` every time this size has been "
"transferred."
msgstr ""
"<function>xxxchannel_setblocksize()</function>设置块大小， 这是"
"<filename>pcm</filename>与声音驱动程序，以及声音驱动 程序与设备之间的传输单位"
"的大小。传输期间，每次传输这样大小的 数据后，声音驱动程序都应当调用"
"<filename>pcm</filename>的 <function>chn_intr()</function>。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:211
msgid ""
"Most sound drivers only take note of the block size here, to be used when an "
"actual transfer will be started."
msgstr ""
"大多数驱动程序只注意这儿的块大小，因为当实际传输开始时应该 使用这个值。"

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:221
#, no-wrap
msgid ""
"          static int\n"
"          xxxchannel_setblocksize(kobj_t obj, void *data, u_int32_t blocksize)\n"
"          {\n"
"              struct xxx_chinfo *ch = data;\n"
"                ...\n"
"              return blocksize; <.>\n"
"           }\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:224
#, fuzzy
msgid ""
"The function returns the possibly adjusted block size. In case the block "
"size is indeed changed, `sndbuf_resize()` should be called to adjust the "
"buffer."
msgstr ""
"函数返回可能调整过的块大小。如果块大小真的变化了， 这种情况下应当调用"
"<function>sndbuf_resize()</function>调整 缓冲区的大小。"

#. type: Title ====
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:226
#, no-wrap
msgid "channel_trigger"
msgstr "channel_trigger"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:229
msgid ""
"`xxxchannel_trigger()` is called by [.filename]#pcm# to control data "
"transfer operations in the driver."
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:239
#, no-wrap
msgid ""
"          static int\n"
"          xxxchannel_trigger(kobj_t obj, void *data, int go) <.>\n"
"          {\n"
"              struct xxx_chinfo *ch = data;\n"
"               ...\n"
"              return 0;\n"
"           }\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:242
msgid "`go` defines the action for the current call. The possible values are:"
msgstr ""

#. type: delimited block = 4
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:246
#, fuzzy
msgid ""
"If the driver uses ISA DMA, `sndbuf_isadma()` should be called before "
"performing actions on the device, and will take care of the DMA chip side of "
"things."
msgstr ""
"如果驱动程序使用ISA DMA，则应当在设备上执行动作前 调用"
"<function>sndbuf_isadma()</function>，并处理DMA芯片一方的 事情。"

#. type: Title ====
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:248
#, no-wrap
msgid "channel_getptr"
msgstr "channel_getptr"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:251
msgid ""
"`xxxchannel_getptr()` returns the current offset in the transfer buffer. "
"This will typically be called by `chn_intr()`, and this is how [."
"filename]#pcm# knows where it can transfer new data."
msgstr ""

#. type: Title ====
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:252
#, no-wrap
msgid "channel_free"
msgstr "channel_free"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:255
#, fuzzy
msgid ""
"`xxxchannel_free()` is called to free up channel resources, for example when "
"the driver is unloaded, and should be implemented if the channel data "
"structures are dynamically allocated or if `sndbuf_alloc()` was not used for "
"buffer allocation."
msgstr ""
"调用<function>xxxchannel_free()</function>来释放通道资源， 例如当驱动程序卸载"
"时，并且如果通道数据结构是动态分配的，或者 如果不使用"
"<function>sndbuf_alloc()</function>进行缓冲区分配， 则应当实现这个函数。"

#. type: Title ====
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:256
#, no-wrap
msgid "channel_getcaps"
msgstr "channel_getcaps"

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:265
#, no-wrap
msgid ""
"          struct pcmchan_caps *\n"
"          xxxchannel_getcaps(kobj_t obj, void *data)\n"
"          {\n"
"              return &xxx_caps; <.>\n"
"           }\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:268
msgid ""
"The routine returns a pointer to a (usually statically-defined) "
"`pcmchan_caps` structure (defined in [.filename]#sound/pcm/channel.h#. The "
"structure holds the minimum and maximum sampling frequencies, and the "
"accepted sound formats. Look at any sound driver for an example."
msgstr ""

#. type: Title ====
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:269
#, no-wrap
msgid "More Functions"
msgstr "更多函数"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:272
msgid ""
"`channel_reset()`, `channel_resetdone()`, and `channel_notify()` are for "
"special purposes and should not be implemented in a driver without "
"discussing it on the {freebsd-multimedia}."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:274
msgid "`channel_setdir()` is deprecated."
msgstr ""

#. type: Title ===
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:275
#, no-wrap
msgid "The MIXER Interface"
msgstr "MIXER 接口"

#. type: Title ====
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:278
#, no-wrap
msgid "mixer_init"
msgstr "mixer_init"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:281
msgid ""
"`xxxmixer_init()` initializes the hardware and tells [.filename]#pcm# what "
"mixer devices are available for playing and recording"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:289
#, no-wrap
msgid ""
"          static int\n"
"          xxxmixer_init(struct snd_mixer *m)\n"
"          {\n"
"              struct xxx_info   *sc = mix_getdevinfo(m);\n"
"              u_int32_t v;\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:291
#, no-wrap
msgid "              [Initialize hardware]\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:296
#, no-wrap
msgid ""
"              [Set appropriate bits in v for play mixers] <.>\n"
"              mix_setdevs(m, v);\n"
"              [Set appropriate bits in v for record mixers]\n"
"              mix_setrecdevs(m, v)\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:299
#, no-wrap
msgid ""
"              return 0;\n"
"          }\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:302
msgid ""
"Set bits in an integer value and call `mix_setdevs()` and `mix_setrecdevs()` "
"to tell [.filename]#pcm# what devices exist."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:304
msgid ""
"Mixer bits definitions can be found in [.filename]#soundcard.h# "
"(`SOUND_MASK_XXX` values and `SOUND_MIXER_XXX` bit shifts)."
msgstr ""

#. type: Title ====
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:305
#, no-wrap
msgid "mixer_set"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:308
msgid "`xxxmixer_set()` sets the volume level for one mixer device."
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:319
#, no-wrap
msgid ""
"          static int\n"
"          xxxmixer_set(struct snd_mixer *m, unsigned dev,\n"
"                           unsigned left, unsigned right) <.>\n"
"          {\n"
"              struct sc_info *sc = mix_getdevinfo(m);\n"
"              [set volume level]\n"
"              return left | (right << 8); <.>\n"
"          }\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:322
msgid ""
"The device is specified as a `SOUND_MIXER_XXX` value. The volume values are "
"specified in range [0-100]. A value of zero should mute the device."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:323
msgid ""
"As the hardware levels probably will not match the input scale, and some "
"rounding will occur, the routine returns the actual level values (in range "
"0-100) as shown."
msgstr ""

#. type: Title ====
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:324
#, no-wrap
msgid "mixer_setrecsrc"
msgstr "mixer_setrecsrc"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:327
msgid "`xxxmixer_setrecsrc()` sets the recording source device."
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:334
#, no-wrap
msgid ""
"          static int\n"
"          xxxmixer_setrecsrc(struct snd_mixer *m, u_int32_t src) <.>\n"
"          {\n"
"              struct xxx_info *sc = mix_getdevinfo(m);\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:336
#, no-wrap
msgid "              [look for non zero bit(s) in src, set up hardware]\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:340
#, no-wrap
msgid ""
"              [update src to reflect actual action]\n"
"              return src; <.>\n"
"           }\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:343
msgid "The desired recording devices are specified as a bit field"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:344
msgid ""
"The actual devices set for recording are returned. Some drivers can only set "
"one device for recording. The function should return -1 if an error occurs."
msgstr ""

#. type: Title ====
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:345
#, no-wrap
msgid "mixer_uninit, mixer_reinit"
msgstr "mixer_uninit, mixer_reinit"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:348
msgid ""
"`xxxmixer_uninit()` should ensure that all sound is muted and if possible "
"mixer hardware should be powered down."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:350
msgid ""
"`xxxmixer_reinit()` should ensure that the mixer hardware is powered up and "
"any settings not controlled by `mixer_set()` or `mixer_setrecsrc()` are "
"restored."
msgstr ""

#. type: Title ===
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:351
#, no-wrap
msgid "The AC97 Interface"
msgstr "AC97接口"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:354
msgid ""
"The _AC97_ interface is implemented by drivers with an AC97 codec. It only "
"has three methods:"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:356
msgid "`xxxac97_init()` returns the number of ac97 codecs found."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:357
msgid "`ac97_read()` and `ac97_write()` read or write a specified register."
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sound/_index.adoc:358
msgid ""
"The _AC97_ interface is used by the AC97 code in [.filename]#pcm# to perform "
"higher level operations. Look at [.filename]#sound/pci/maestro3.c# or many "
"others under [.filename]#sound/pci/# for an example."
msgstr ""
