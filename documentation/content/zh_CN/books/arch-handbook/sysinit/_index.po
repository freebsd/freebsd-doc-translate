# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR The FreeBSD Project
# This file is distributed under the same license as the FreeBSD Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: FreeBSD Documentation VERSION\n"
"POT-Creation-Date: 2025-05-01 19:56-0300\n"
"PO-Revision-Date: 2021-06-03 00:09+0000\n"
"Last-Translator: Anonymous <noreply@weblate.org>\n"
"Language-Team: Chinese (Simplified) <https://translate-dev.freebsd.org/"
"projects/documentation/booksarch-handbooksysinit_index/zh_CN/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.6.2\n"

#. type: Title =
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:1
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:14
#, no-wrap
msgid "The SYSINIT Framework"
msgstr ">SYSINIT框架"

#. type: YAML Front Matter: title
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:1
#, no-wrap
msgid "Chapter 5. The SYSINIT Framework"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:52
#, fuzzy
msgid ""
"SYSINIT is the framework for a generic call sort and dispatch mechanism. "
"FreeBSD currently uses it for the dynamic initialization of the kernel. "
"SYSINIT allows FreeBSD's kernel subsystems to be reordered, and added, "
"removed, and replaced at kernel link time when the kernel or one of its "
"modules is loaded without having to edit a statically ordered initialization "
"routing and recompile the kernel. This system also allows kernel modules, "
"currently called _KLD's_, to be separately compiled, linked, and initialized "
"at boot time and loaded even later while the system is already running. This "
"is accomplished using the \"kernel linker\" and \"linker sets\"."
msgstr ""
"SYSINIT是一个通用的调用排序与分别执行机制的框架。FreeBSD目前使用它来进行内核"
"的动态初始化。SYSINIT使得FreeBSD的内核各子系统可以在内核或模块动态加载链接时"
"被重整、添加、删除、替换，这样，内核和模块加载时就不必去修改一个静态的有序初"
"始化安排表甚至重新编译内核。这个体系也使得内核模块(现在称为<firstterm>KLD</"
"firstterm>可以与内核不同时编译、链接、在引导系统时加载，甚至在系统运行时加"
"载。这些操作是通过<quote>内核链接器</quote>(kernel linker)和<quote>链接器集合"
"</quote>(linker set)完成的。"

#. type: Title ==
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:54
#, no-wrap
msgid "Terminology"
msgstr "术语"

#. type: Labeled list
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:56
#, no-wrap
msgid "Linker Set"
msgstr "链接器集合(Linker Set)"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:58
msgid ""
"A linker technique in which the linker gathers statically declared data "
"throughout a program's source files into a single contiguously addressable "
"unit of data."
msgstr ""
"一种链接方法。这种方法将整个程序源文件中静态申明的数据收集到一个可邻近寻址的"
"数据单元中。"

#. type: Title ==
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:60
#, no-wrap
msgid "SYSINIT Operation"
msgstr "SYSINIT操作"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:63
#, fuzzy
msgid ""
"SYSINIT relies on the ability of the linker to take static data declared at "
"multiple locations throughout a program's source and group it together as a "
"single contiguous chunk of data. This linker technique is called a \"linker "
"set\". SYSINIT uses two linker sets to maintain two data sets containing "
"each consumer's call order, function, and a pointer to the data to pass to "
"that function."
msgstr ""
"SYSINIT要依靠链接器获取遍布整个程序源代码多处申明的静态数据并把它们组成一个彼"
"此相邻的数据块。这种链接方法被称为<quote>链接器集合</quote>(linker set)。"
"SYSINIT使用两个链接器集合以维护两个数据集合，包含每个数据条目的调用顺序、函"
"数、一个会被提交给该函数的数据指针。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:65
#, fuzzy
msgid ""
"SYSINIT uses two priorities when ordering the functions for execution. The "
"first priority is a subsystem ID giving an overall order for SYSINIT's "
"dispatch of functions. Current predeclared ID's are in [.filename]#<sys/"
"kernel.h># in the enum list `sysinit_sub_id`. The second priority used is an "
"element order within the subsystem. Current predeclared subsystem element "
"orders are in [.filename]#<sys/kernel.h># in the enum list "
"`sysinit_elem_order`."
msgstr ""
"SYSINIT按照两类优先级标识对函数排序以便执行。第一类优先级的标识是子系统的标"
"识，给出SYSINIT分别执行子系统的函数的全局顺序，定义在<filename>&lt;sys/"
"kernel.h&gt;</filename>中的枚举<literal>sysinit_sub_id</literal>内。第二类优"
"先级标识在子系统中的元素的顺序，定义在<filename>&lt;sys/kernel.h&gt;</"
"filename>中的枚举<literal>sysinit_elem_order</literal>内。"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:67
#, fuzzy
msgid ""
"There are currently two uses for SYSINIT. Function dispatch at system "
"startup and kernel module loads, and function dispatch at system shutdown "
"and kernel module unload. Kernel subsystems often use system startup "
"SYSINIT's to initialize data structures, for example the process scheduling "
"subsystem uses a SYSINIT to initialize the run queue data structure. Device "
"drivers should avoid using `SYSINIT()` directly. Instead drivers for real "
"devices that are part of a bus structure should use `DRIVER_MODULE()` to "
"provide a function that detects the device and, if it is present, "
"initializes the device. It will do a few things specific to devices and then "
"call `SYSINIT()` itself. For pseudo-devices, which are not part of a bus "
"structure, use `DEV_MODULE()`."
msgstr ""
"有两种时刻需要使用SYSINIT：系统启动或内核模块加载时，系统析构或内核模块卸载"
"时。内核子系统通常在系统启动时使用SYSINIT的定义项以初始化数据结构。例如，进程"
"调度子系统使用一个SYSINIT定义项来初始化运行队列数据结构。设备驱动程序应避免直"
"接使用<literal>SYSINIT()</literal>，对于总线结构上的物理真实设备应使用"
"<literal>DRIVER_MODULE()</literal>调用的函数先侦测设备的存在，如果存在，再进"
"行设备的初始化。这一系统过程中，会做一些专门针对设备的事情，然后调用"
"<literal>SYSINIT()</literal>本身。对于非总线结构一部分的虚设备，应改用"
"<literal>DEV_MODULE()</literal>。"

#. type: Title ==
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:69
#, no-wrap
msgid "Using SYSINIT"
msgstr "使用SYSINIT"

#. type: Title ===
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:71
#, no-wrap
msgid "Interface"
msgstr "接口"

#. type: Title ====
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:73
#, no-wrap
msgid "Headers"
msgstr "头文件"

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:78
#, no-wrap
msgid "<sys/kernel.h>\n"
msgstr ""

#. type: Title ====
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:80
#, no-wrap
msgid "Macros"
msgstr "宏"

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:86
#, fuzzy, no-wrap
msgid ""
"SYSINIT(uniquifier, subsystem, order, func, ident)\n"
"SYSUNINIT(uniquifier, subsystem, order, func, ident)\n"
msgstr ""
"SYSINIT(uniquifier, subsystem, order, func, ident)\n"
"SYSUNINIT(uniquifier, subsystem, order, func, ident)\n"

#. type: Title ===
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:88
#, no-wrap
msgid "Startup"
msgstr "启动"

#. type: Plain text
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:91
#, fuzzy
msgid ""
"The `SYSINIT()` macro creates the necessary SYSINIT data in SYSINIT's "
"startup data set for SYSINIT to sort and dispatch a function at system "
"startup and module load. `SYSINIT()` takes a uniquifier that SYSINIT uses to "
"identify the particular function dispatch data, the subsystem order, the "
"subsystem element order, the function to call, and the data to pass the "
"function. All functions must take a constant pointer argument."
msgstr ""
">宏<literal>SYSINIT()</literal>在SYSINIT启动数据集合中建立一个SYSINIT数据项，"
"以便SYSINIT在系统启动或模块加载时排序并执行其中的函数。<literal>SYSINIT()</"
"literal>有一个参数uniquifier，SYSINIT用它来标识数据项，随后是子系统顺序号、子"
"系统元素顺序号、待调用函数、传递给函数的数据。所有的函数必须有一个恒量指针参"
"数。"

#. type: Block title
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:92
#, no-wrap
msgid "Example of a `SYSINIT()`"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:98
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:148
#, no-wrap
msgid "#include <sys/kernel.h>\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:104
#, no-wrap
msgid ""
"void foo_null(void *unused)\n"
"{\n"
"        foo_doo();\n"
"}\n"
"SYSINIT(foo, SI_SUB_FOO, SI_ORDER_FOO, foo_null, NULL);\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:108
#, no-wrap
msgid ""
"struct foo foo_voodoo = {\n"
"        FOO_VOODOO;\n"
"}\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:115
#, no-wrap
msgid ""
"void foo_arg(void *vdata)\n"
"{\n"
"        struct foo *foo = (struct foo *)vdata;\n"
"        foo_data(foo);\n"
"}\n"
"SYSINIT(bar, SI_SUB_FOO, SI_ORDER_FOO, foo_arg, &foo_voodoo);\n"
msgstr ""

#. type: delimited block = 4
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:119
#, fuzzy
msgid ""
"Note that `SI_SUB_FOO` and `SI_ORDER_FOO` need to be in the `sysinit_sub_id` "
"and `sysinit_elem_order` enum's as mentioned above. Either use existing ones "
"or add your own to the enum's. You can also use math for fine-tuning the "
"order a SYSINIT will run in. This example shows a SYSINIT that needs to be "
"run just barely before the SYSINIT's that handle tuning kernel parameters."
msgstr ""
"注意，<literal>SI_SUB_FOO</literal>和<literal>SI_ORDER_FOO</literal>应当分别"
"在上面提到的枚举<literal>sysinit_sub_id</literal>和"
"<literal>sysinit_elem_order</literal>之中。既可以使用已有的枚举项，也可以将自"
"己的枚举项添加到这两个枚举的定义之中。你可以使用数学表达式微调SYSINIT的执行顺"
"序。以下的例子示例了一个需要刚好要在内核参数调整的SYSINIT之前执行的SYSINIT。"

#. type: Block title
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:120
#, no-wrap
msgid "Example of Adjusting `SYSINIT()` Order"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:128
#, no-wrap
msgid ""
"static void\n"
"mptable_register(void *dummy __unused)\n"
"{\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:131
#, no-wrap
msgid ""
"\tapic_register_enumerator(&mptable_enumerator);\n"
"}\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:134
#, no-wrap
msgid ""
"SYSINIT(mptable_register, SI_SUB_TUNABLES - 1, SI_ORDER_FIRST,\n"
"    mptable_register, NULL);\n"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:138
#, no-wrap
msgid "Shutdown"
msgstr "关闭"

#. type: delimited block = 4
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:141
msgid ""
"The `SYSUNINIT()` macro behaves similarly to the `SYSINIT()` macro except "
"that it adds the SYSINIT data to SYSINIT's shutdown data set."
msgstr ""

#. type: Block title
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:142
#, no-wrap
msgid "Example of a `SYSUNINIT()`"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:154
#, no-wrap
msgid ""
"void foo_cleanup(void *unused)\n"
"{\n"
"        foo_kill();\n"
"}\n"
"SYSUNINIT(foobar, SI_SUB_FOO, SI_ORDER_FOO, foo_cleanup, NULL);\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:158
#, no-wrap
msgid ""
"struct foo_stack foo_stack = {\n"
"        FOO_STACK_VOODOO;\n"
"}\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/arch-handbook/sysinit/_index.adoc:163
#, no-wrap
msgid ""
"void foo_flush(void *vdata)\n"
"{\n"
"}\n"
"SYSUNINIT(barfoo, SI_SUB_FOO, SI_ORDER_FOO, foo_flush, &foo_stack);\n"
msgstr ""
